#!/usr/bin/python3

import pickle
import argparse
from jq import jq
import json
import os
import sys
import time
import googleapiclient.discovery
from apiclient import errors
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request

import pprint
SCOPES = ['https://www.googleapis.com/auth/admin.directory.user']

#CUSTOMER_ID = "C04bow9da"
CUSTOMER_ID = "pennbrain.upenn.edu"
def get_credentials():

    creds = None
    # The file token.pickle stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                '/home/holder/.config/gcloud/credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open('token.pickle', 'wb') as token:
            pickle.dump(creds, token)

    return creds


def get_directory_service():

    creds = get_credentials()
    service = googleapiclient.discovery.build('admin', 'directory_v1', credentials=creds)

    return service

def update_user_posix_credentials(user_email, home_dir, username, shell, uid, gid, key):

    user = service.users().get(userKey=user_email).execute()

    # Verify that the user has a posixAccount

    if 'posixAccounts' in user.keys():
        posix_account = user['posixAccounts'][0]
        print('Existing POSIX account info:')
        print(posix_account)
        print(json.dumps(user, indent=2))
    else :
        print( 'No POSIX account information found. Creating POSIX account metadata' )
        pprint.pprint( user )
        posix_account = {}

    # Update credentials
    posix_modified = False

    if home_dir:
        posix_account['homeDirectory'] = home_dir
        posix_modified = True

    if username:
        posix_account['username'] = username
        posix_modified = True

    if shell:
        posix_account['shell'] = shell
        posix_modified = True

    if uid:
        posix_account['uid'] = str(uid)
        posix_modified = True

    if gid:
        posix_account['gid'] = str(gid)
        posix_modified = True


    pprint.pprint( posix_account )
    if posix_modified:

        posix_account['shell'] = '/bin/bash'
        update_command = service.users().update(userKey=user_email,
                                                body={'posixAccounts': [posix_account]})
        update_command.execute()


        print('POSIX account info updated; changes may take a few seconds to propagate. '
              'Check `gcloud beta compute os-login describe-profile` for changes')

    if key:
        if 'sshPublicKeys' in user.keys():
            public_keys = user['sshPublicKeys'][0]
        else:
            public_keys = {}

        public_keys['key'] = key

        update_command = service.users().update(userKey=user_email,
                                            body={'sshPublicKeys': [public_keys]})
        time.sleep(1)
        update_command.execute()
        print('Public RSA Key info updated; changes may take a few seconds to propagate. '
              'Check `gcloud beta compute os-login describe-profile` for changes')


def main():

    parser = argparse.ArgumentParser(description='Utility for modifying POSIX user information')
    parser.add_argument('user_email', nargs='*')
    parser.add_argument('--home_dir', help='new home directory for the user')
    parser.add_argument('--username', help='new username for the user')
    parser.add_argument('--shell', help='new shell for the user')
    parser.add_argument('--uid', choices=range(1001, 65000), metavar='[1001-64999]',
                           type=int, help='new user ID for the user')
    parser.add_argument('--gid', type=int, help='new group ID for the user')
    parser.add_argument('--key', type=str, help='new public RSA key for the user')

    args = parser.parse_args()

    service = get_directory_service()

    Users = []
    page_token = None
    while True:
        try:
            results = service.users().list(customer="C04bow9da", maxResults=2, domain="pennbrain.upenn.edu", pageToken=page_token).execute()
            users = results.get('users')
            for u in users:
                Users.append(u)

            page_token = results.get('nextPageToken')
            if (not page_token):
                break
        except errors.HttpError as error:
            print('An error occurred: %s' % (error))
            break


    MaxUID = sorted(jq('[ ..|.uid?|strings]').transform(Users))[-1]
    MaxGID = sorted(jq('[ ..|.gid?|strings]').transform(Users))[-1]
    print("MaxUID = ", MaxUID, "MaxGID = ", MaxGID)
    
    sys.exit(0)
    update_user_posix_credentials(**vars(args))

    # update_user_rsa_keys
    

if __name__ == '__main__':
    main()
