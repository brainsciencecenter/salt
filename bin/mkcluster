#!/bin/bash

CmdName=$(basename "$0")

#
# Build/rm cluster
#


#OrganizationID=900475861822
function getOrgInfo () {
    gcloud organizations list --format json | jq -r '.[]| "\(.displayName) \(.name) \(.owner.directoryCustomerId)"' | sed 's,organizations/,,'
}

#ParentFolderID=953779295229 # pennbrain-services
function getTopFolderInfo() {
    local OrganizationID="$1"

    gcloud resource-manager folders list --organization "$OrganizationID" --format json | jq -r '.[]|"\(.displayName) \(.name)"' | sed 's,folders/,,'
}

# BillingAccountID=010E05-389CEA-FDE7D9 # UPenn-PMACS
function getBillingAccountId () {
    gcloud beta billing accounts list --format json | jq -r '.[].name' | sed 's,billingAccounts/,,'
}

function getAdminFolderId () {
    gcloud resource-manager folders list --folder 953779295229 --format json  --filter=displayName=admin | jq -r '.[].name' | sed 's,folders/,,'
}

#VPCNetworkProjectID=pennbrain-host-3097383fff
function getVPCNetworkProjectId () {
    local Name="$1"

    gcloud projects list --filter name="$Name" --format json | jq -r '.[].projectId'
}

#gcloud compute networks list --project pennbrain-host-3097383fff --format json
getSubnetInfo () {
    local Project="$1"
    local Region="$2"
    
    gcloud compute networks subnets list --project "$Project" --format json --filter="region:( ${Region} ) AND privateIpGoogleAccess=true"
}

#SubnetRange="10.40.0.0/16"
getNextSubnetRange() {
    local SubnetFormat="$1"
    local SubnetJson="$2"

    LastSubnetNumber=$(echo "$SubnetJson" | jq -r '.[].ipCidrRange' | sort | tail -n 1 | cut -f 2 -d .)
    NextSubnetNumber=$(($LastSubnetNumber + 1))
    NextSubnetRange=$(printf "$SubnetFormat" $NextSubnetNumber)

    echo "$NextSubnetRange"
}

Group=holder-demo1
VPCNetworkProjectName=pennbrain-host
VPCNetworkName=bsc-host-network
Region=us-east1
Zone=us-east1-b
SubnetFormat="10.%d.0.0/16\n"

read -r Domain OrganizationID CustomerID <<< $(getOrgInfo)
read -r TopFolder ParentFolderID <<< $(getTopFolderInfo "$OrganizationID")
read -r BillingAccountID <<< $(getBillingAccountId)
read -r AdminFolderID <<< $(getAdminFolderId)
read -r VPCNetworkProjectID <<< $(getVPCNetworkProjectId "$VPCNetworkProjectName")

SubnetJson=$(getSubnetInfo "$VPCNetworkProjectID" "$Region")
SubnetRange=$(getNextSubnetRange "$SubnetFormat" "$SubnetJson")
SubnetName="${Group}-subnet"

echo $Domain
echo $OrganizationID
echo $CustomerID
echo $TopFolder
echo $ParentFolderID
echo $BillingAccountID
echo $AdminFolderID
echo $VPCNetworkProjectID
echo $SubnetRange

Salt=$(echo "$Domain" | sed 's/\./-/g')

ProjectName="${Group}-${Salt}"
ServiceAccountID=slurm-gcp@${ProjectName}
ServiceAccountName=$ServiceAccountID

echo $ProjectName
echo $ServiceAccountName
echo $ServiceAccountID

exit 0



#
# create/rm folder
# https://cloud.google.com/resource-manager/docs/creating-managing-folders
#

mkFolder() {
	 gcloud resource-manager folders create \
	   --display-name="$Group" \
	   --folder="$ParentFolderID" 2>&1

}

function listFolder() {
	 gcloud resource-manager folders list --folder "$ParentFolderID"
}

function rmFolder() {
	 FolderID="$1"

	 gcloud projects list --filter=" parent.id: '${FolderID}' " | grep -v '^PROJECT_ID' | while read Project_ID Name Project_Number
	 do
		echo y | gcloud projects delete "$Project_Number" 
	done

 	 gcloud resource-manager folders delete "$FolderID"
}

# create project
function mkProject() {
	 ProjectName="$1"
	 FolderID="$2"

	 gcloud projects create --folder="$FolderID" "$ProjectName"
}

# attach project to billing account
# https://cloud.google.com/sdk/gcloud/reference/alpha/billing/accounts/projects/link
function linkProjectToBillingAccount {
	 ProjectName="$1"
	 BillingAccountID="$2"

	 gcloud beta billing accounts projects link "$ProjectName" --billing-account="$BillingAccountID"
}

# https://cloud.google.com/sdk/gcloud/reference/compute/networks/subnets/create
function mkSubnet {
	 VPCNetworkName="$1"
	 VPCNetworkProjectID="$2"
	 SubnetName="$3"
	 SubnetRange="$4"

	 gcloud compute networks subnets create "$SubnetName" --project="$VPCNetworkProjectID" --range="$SubnetRange" --network="$VPCNetworkName"
}

# create service account
#https://cloud.google.com/sdk/gcloud/reference/iam/service-accounts/create
function mkServiceAccount {
	 ServiceAccountID="$1"
	 ServiceAccountName="$2"

echo	 gcloud iam service-accounts create "$ServiceAccountID"  --display-name "$ServiceAccountName"
}
# turn on compute engine api for project
# add project to pennbrain-host-?? vpc-network
# create group for cluster
# add perms to service account
# add service account to group?
# create subnet for project with next address segment
# create subprojects
# create cluster yaml template
# spin up cluster controller

# Create router and router nat
function mkrouter {
	 gcloud compute routers create holder-demo-router --project pennbrain-host-3097383fff --network bsc-host-network
	 gcloud beta compute routers nats create holder-demo-router-nat --router holder-demo-router --project pennbrain-host-3097383fff --auto-allocate-nat-external-ips --nat-custom-subnet-ip-ranges=holder-demo-subnet 
}


# tear down -- have to leave the extra disk and snapshots

if [ "$CmdName" == mkcluster ]
then
#	FolderID=$(mkFolder | grep '^ name: ' | sed "s/'//g" | cut -f 2 -d /)
#	echo "$FolderID"
#	listFolder
#	mkProject "$ProjectName" "$FolderID"
#	linkProjectToBillingAccount "$ProjectName" "$BillingAccountID"

#	mkSubnet "$VPCNetworkName" "$VPCNetworkProjectID" "$SubnetName" "$SubnetRange"
#	mkServiceAccount "$ServiceAccountID" "$ServiceAccountName"
elif [ "$CmdName" == rmcluster ]
then
    # Must remove the project and other resources before you can remove the folder
    # projects can be deleted but can be undeleted for 30 days.
    # deleting the project does not delete the associated subnet
    
    FolderID=$(listFolder "$ParentFolderID" | grep "^${Group} " | awk '{print $3}')
    rmFolder "$FolderID"
fi
